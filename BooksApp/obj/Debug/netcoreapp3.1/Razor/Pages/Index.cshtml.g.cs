#pragma checksum "F:\N4_2022-2023\PTUD HTTTHD\TH\BooksManager\BooksApp\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ff40a130ff354908571a8054d6abb50bd6ad69d5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(BooksApp.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace BooksApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\N4_2022-2023\PTUD HTTTHD\TH\BooksManager\BooksApp\Pages\_ViewImports.cshtml"
using BooksApp;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ff40a130ff354908571a8054d6abb50bd6ad69d5", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a990c2fc62c5fe9fe9736f2bec0cd37c9be5e0f0", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "F:\N4_2022-2023\PTUD HTTTHD\TH\BooksManager\BooksApp\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Books</h1>
    <table class=""table table-bordered"">
        <thead>
            <tr>
                <th scope=""col"">ID</th>
                <th scope=""col"">Name</th>
                <th scope=""col"">Publisher</th>
                <th scope=""col"">Category</th>
                <th scope=""col"">Author</th>
                <th scope=""col"">Action</th>
            </tr>
        </thead>
        <tbody class=""body-table"">
            <tr>
                <th scope=""row"">1</th>
                <td>Mark</td>
                <td>Otto</td>
                <td>mdo</td>
                <td>mdo</td>
                <td>
                    <button class=""small"">Edit</button>
                    <button class=""small"">Delete</button>
                </td>
            </tr>
        </tbody>
    </table>

    <button type=""button"" id=""btn-modal"" class=""btn btn-primary"" data-bs-toggle=""modal"" data-bs-target=""#exampleModal"" onclick=(resetModal())>Ad");
            WriteLiteral(@"d a Book</button>
    <button type=""button"" id=""btn-modal-edit"" class=""btn btn-primary d-none"" data-bs-toggle=""modal"" data-bs-target=""#exampleModal"">Edit</button>

    <div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
        <div class=""modal-dialog"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <h1 class=""modal-title fs-5"" id=""exampleModalLabel"">Add a Book</h1>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ff40a130ff354908571a8054d6abb50bd6ad69d55018", async() => {
                WriteLiteral(@"
                        <input type=""text"" class=""form-control"" name=""name"" id=""book-id"" hidden>
                        <div class=""mb-3"">
                            <label for=""recipient-name"" class=""col-form-label float-start"">Name</label>
                            <input type=""text"" class=""form-control"" name=""name"" id=""book-name"">
                        </div>
                        <div class=""mb-3"">
                            <label for=""message-text"" class=""col-form-label float-start"">Publishers</label>
                            <input class=""form-control"" name=""publishers"" id=""book-publisher""></input>
                        </div>
                        <div class=""mb-3"">
                            <label for=""message-text"" class=""col-form-label float-start"">Category</label>
                            <input class=""form-control"" name=""category"" id=""book-category""></input>
                        </div>
                        <div class=""mb-3"">
                            <");
                WriteLiteral("label for=\"message-text\" class=\"col-form-label float-start\">Author</label>\r\n                            <input class=\"form-control\" name=\"author\" id=\"book-author\"></input>\r\n                        </div>\r\n                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>
                    <button type=""button"" id=""btn-add"" class=""btn btn-primary"" onclick=""handleAddUpdateBook(true)"">Add</button>
                    <button type=""button"" id=""btn-update"" class=""btn btn-primary d-none"" onclick=""handleAddUpdateBook(false)"">Update</button>
                </div>
            </div>
        </div>
    </div>

    <p>Learn about <a href=""https://docs.microsoft.com/aspnet/core"">building Web apps with ASP.NET Core</a>.</p>
</div>

<script type=""text/javascript"">
    function handleAddUpdateBook(add) {
        var id = $(""#book-id"").val();
        var name = $(""#book-name"").val();
        var publisher = $(""#book-publisher"").val();
        var category = $(""#book-category"").val();
        var author = $(""#book-author"").val();

        if (name == """") {
            return alert(""Name is requir");
            WriteLiteral(@"ed"")
        }

        var data = {
            name,
            publisher,
            category,
            author,
        }

        var apiUrl = 'https://localhost:44344/api/Books/';

        if (add == false) {
            apiUrl += id;
        }

        fetch(apiUrl, {
            method: ""POST"",
            headers: {
                'Content-Type': 'application/json; charset=utf-8',
                ""Access-Control-Allow-Methods"": ""*"",
            },
            body: JSON.stringify(data),
        }).then(response => {
            return response.json();
        }).then(data => {
            // Work with JSON data here
            console.log(data);
            location.reload();
        }).catch(err => {
            // Do something for an error here
            alert(err);
        });
    }

    function getBooks() {
        var apiUrl = 'https://localhost:44344/api/Books';

        fetch(apiUrl).then(response => {
            return response.json();
       ");
            WriteLiteral(@" }).then(data => {
            // Work with JSON data here
            console.log(data);
            genTable(data)
        }).catch(err => {
            // Do something for an error here
            alert(err);
        });
    }

    function deleteBook(id) {
        var apiUrl = 'https://localhost:44344/api/Books/' + id;

        fetch(apiUrl, {
            method: ""DELETE"",
            headers: {
                'Content-Type': 'application/json',
                ""Access-Control-Allow-Methods"": ""*"",
            },}).then(response => {
            return response.json();
        }).then(data => {
            // Work with JSON data here
            location.reload();
            console.log(data);
        }).catch(err => {
            // Do something for an error here
            alert(err);
        });
    }

    function handleEditBook(id) {
        var apiUrl = 'https://localhost:44344/api/Books/' + id;

        fetch(apiUrl, {
            method: ""GET"",
            hea");
            WriteLiteral(@"ders: {
                'Content-Type': 'application/json',
                ""Access-Control-Allow-Methods"": ""*"",
            },
        }).then(response => {
            return response.json();
        }).then(data => {
            // Work with JSON data here
            handleSetFormEdit(data[0]);
            
        }).catch(err => {
            // Do something for an error here
            alert(err);
        });
    }

    function resetModal() {
        $(""#book-id"").val("""");
        $(""#book-name"").val("""");
        $(""#book-publishers"").val("""");
        $(""#book-category"").val("""");
        $(""#book-author"").val("""");

        $(""#btn-add"").removeClass('d-none');
        $(""#btn-update"").addClass('d-none');
    }

    function handleSetFormEdit(data) {
        $(""#book-id"").val(data.id);
        $(""#book-name"").val(data.name);
        $(""#book-publishers"").val(data.publisher);
        $(""#book-category"").val(data.category);
        $(""#book-author"").val(data.author);

  ");
            WriteLiteral(@"      $(""#btn-add"").addClass('d-none');
        $(""#btn-update"").removeClass('d-none');

        var btn = $(""#btn-modal-edit"");
        btn.click();
    }

    function genTable(data) {
        var body = '';
        var eBody = document.querySelector('.body-table');

        for (var i = 0; i < data.length; i++) {
            body += `<tr>
                <th scope=""row"">` + data[i].id + `</th>
                <td>` + data[i].name + `</td>
                <td>` + data[i].publisher + `</td>
                <td>` + data[i].category + `</td>
                <td>` + data[i].author + `</td>
                <td>
                    <button class=""small"" onclick=(handleEditBook(` + data[i].id + `))>Edit</button>
                    <button class=""small"" onclick=(deleteBook(` + data[i].id + `))>Delete</button>
                </td>
            </tr>`
        }
        eBody.innerHTML = body;
    }

    getBooks();
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
